{"ast":null,"code":"import _toConsumableArray from \"/Users/darlenewelch/rubies/api-mtg-ruby/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/darlenewelch/rubies/api-mtg-ruby/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport axios from \"axios\";\nimport thunk from \"redux-thunk\"; // const baseUrl = process.env.BASE_URL\n\nvar initialState = {\n  deck: \"\",\n  foundCard: {\n    name: \"\",\n    colors: []\n  },\n  loading: false,\n  currentUser: {\n    username: '',\n    decks: []\n  },\n  loggedIn: false\n};\n\nvar reducer = function reducer() {\n  var prevState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"START_LOADING\":\n      return _objectSpread({}, prevState, {\n        loading: true\n      });\n\n    case \"GET_CARD\":\n      return _objectSpread({}, prevState, {\n        foundCard: action.card,\n        loading: false\n      });\n\n    case \"CREATE_DECK\":\n      return _objectSpread({}, prevState, {\n        deck: action.deck\n      });\n\n    case \"ADD_TO_DECK\":\n      console.log(\"PrevState: \", prevState.currentUser.decks[0].cards);\n      return _objectSpread({}, prevState, {\n        currentUser: _objectSpread({}, prevState.currentUser, {\n          decks: prevState.currentUser.decks.map(function (deck) {\n            return deck._id === action.deck_id ? _objectSpread({}, deck, {\n              cards: _toConsumableArray(deck.cards).concat([action.card])\n            }) : deck;\n          })\n        }),\n        loading: false\n      });\n\n    case \"SAVE_DECK\":\n      return _objectSpread({}, prevState, {\n        decks: action.decks\n      });\n\n    case \"LOGIN\":\n      return _objectSpread({}, prevState, {\n        loggedIn: true,\n        currentUser: _objectSpread({}, prevState.user, action.user),\n        loading: false\n      });\n\n    case \"LOGOUT\":\n      return _objectSpread({}, prevState, {\n        loggedIn: false,\n        currentUser: {\n          username: ''\n        },\n        loading: false\n      });\n\n    case \"CREATE_USER\":\n      return _objectSpread({}, prevState, {\n        username: action.user,\n        decks: [],\n        loading: false\n      });\n\n    default:\n      return prevState;\n  }\n};\n\nvar store = createStore(reducer, applyMiddleware(thunk));\nstore.subscribe(function () {\n  return console.log(store.getState());\n}); //ACTION CREATORS\n\nexport var getCard = function getCard() {\n  var url = \"https://api.magicthegathering.io/v1/cards?random=true&pageSize=1\";\n\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  if (args) {\n    args.map(function (arg) {\n      return url += \"&\" + arg.name + \"=\" + arg.value;\n    });\n  }\n\n  return function (dispatch) {\n    console.log(\"dis: \", dispatch); //DO THE PROMISE STUFF\n\n    store.dispatch({\n      type: \"START_LOADING\"\n    });\n    axios.get(url).then(function (response) {\n      var card = {};\n\n      if (response.data.cards.length > 0) {\n        card = {\n          id: response.data.cards[0].id,\n          name: response.data.cards[0].name,\n          colors: response.data.cards[0].colors || [],\n          manaCost: response.data.cards[0].manaCost,\n          types: response.data.cards[0].types,\n          description: response.data.cards[0].text,\n          power: response.data.cards[0].power,\n          toughness: response.data.cards[0].toughness,\n          image: response.data.cards[0].imageUrl\n        };\n      }\n\n      store.dispatch({\n        type: \"GET_CARD\",\n        card: card\n      });\n    });\n  };\n};\nexport var addToDeck = function addToDeck(card, deckId) {\n  console.log(\"Card: \", card, \" DECK ID: \", deckId);\n  return function (dispatch) {\n    store.dispatch({\n      type: \"ADD_TO_DECK\",\n      card: card,\n      deck_id: deckId\n    });\n  };\n};\nexport var createUser = function createUser(username) {\n  return function (dispatch) {\n    axios.post('/api/v1/users/', {\n      username: username\n    }).then(function (response) {\n      if (response) {\n        store.dispatch({\n          type: \"LOGIN\",\n          user: response.data\n        });\n      }\n    });\n  };\n};\nexport var login = function login(user) {\n  return function (dispatch) {\n    axios.post('/api/v1/users/login', {\n      user: {\n        username: user\n      }\n    }).then(function (response) {\n      if (response) {\n        store.dispatch({\n          type: \"LOGIN\",\n          user: response.data\n        });\n      } else {\n        return user;\n      }\n\n      console.log(response.data);\n    });\n  };\n};\nexport var logout = function logout() {\n  return function (dispatch) {\n    store.dispatch({\n      type: \"LOGOUT\"\n    });\n  };\n};\nexport var createDeck = function createDeck(name, description) {\n  return function (dispatch) {\n    axios.post('/api/v1/decks', {\n      deck: {\n        name: name,\n        description: description,\n        user_id: store.getState().currentUser.id\n      }\n    }).then(function (response) {\n      if (response) {\n        store.dispatch({\n          type: \"CREATE_DECK\",\n          deck: response.data\n        });\n      } else {\n        console.log(response.data);\n      }\n    });\n  };\n};\nexport var saveDeckToDB = function saveDeckToDB(deck, cards) {\n  return function (dispatch) {\n    axios.put('/api/v1/decks/' + deck.id, {\n      deck: {\n        cards: _toConsumableArray(deck.cards).concat(_toConsumableArray(cards))\n      }\n    }).then(function (response) {\n      if (response) {\n        store.dispatch({\n          type: \"SAVE_DECK\",\n          decks: response.data\n        });\n      }\n    });\n  };\n};\nexport default store;","map":{"version":3,"sources":["/Users/darlenewelch/rubies/api-mtg-ruby/client/src/redux/index.js"],"names":["createStore","applyMiddleware","axios","thunk","initialState","deck","foundCard","name","colors","loading","currentUser","username","decks","loggedIn","reducer","prevState","action","type","card","console","log","cards","map","_id","deck_id","user","store","subscribe","getState","getCard","url","args","arg","value","dispatch","get","then","response","data","length","id","manaCost","types","description","text","power","toughness","image","imageUrl","addToDeck","deckId","createUser","post","login","logout","createDeck","user_id","saveDeckToDB","put"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,aAAlB,C,CAEA;;AAEA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,EADW;AAEjBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,EADC;AAEPC,IAAAA,MAAM,EAAE;AAFD,GAFM;AAOjBC,EAAAA,OAAO,EAAE,KAPQ;AAQjBC,EAAAA,WAAW,EAAE;AACTC,IAAAA,QAAQ,EAAE,EADD;AAETC,IAAAA,KAAK,EAAE;AAFE,GARI;AAYjBC,EAAAA,QAAQ,EAAE;AAZO,CAArB;;AAeA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAsC;AAAA,MAArCC,SAAqC,uEAAzBX,YAAyB;AAAA,MAAXY,MAAW;;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,eAAL;AACI,+BACOF,SADP;AAEIN,QAAAA,OAAO,EAAE;AAFb;;AAIJ,SAAK,UAAL;AACI,+BACOM,SADP;AAEIT,QAAAA,SAAS,EAAEU,MAAM,CAACE,IAFtB;AAGIT,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAK,aAAL;AACI,+BACOM,SADP;AAEIV,QAAAA,IAAI,EAAEW,MAAM,CAACX;AAFjB;;AAIJ,SAAK,aAAL;AACIc,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,SAAS,CAACL,WAAV,CAAsBE,KAAtB,CAA4B,CAA5B,EAA+BS,KAA1D;AACA,+BACON,SADP;AAEIL,QAAAA,WAAW,oBACJK,SAAS,CAACL,WADN;AAEPE,UAAAA,KAAK,EAAEG,SAAS,CAACL,WAAV,CAAsBE,KAAtB,CAA4BU,GAA5B,CACH,UAACjB,IAAD;AAAA,mBAAUA,IAAI,CAACkB,GAAL,KAAaP,MAAM,CAACQ,OAApB,qBAAkCnB,IAAlC;AAAwCgB,cAAAA,KAAK,qBAAMhB,IAAI,CAACgB,KAAX,UAAkBL,MAAM,CAACE,IAAzB;AAA7C,iBACRb,IADF;AAAA,WADG;AAFA,UAFf;AASII,QAAAA,OAAO,EAAE;AATb;;AAWJ,SAAK,WAAL;AACI,+BACOM,SADP;AAEIH,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAFlB;;AAIJ,SAAK,OAAL;AACI,+BACOG,SADP;AAEIF,QAAAA,QAAQ,EAAE,IAFd;AAGIH,QAAAA,WAAW,oBAAMK,SAAS,CAACU,IAAhB,EAAyBT,MAAM,CAACS,IAAhC,CAHf;AAIIhB,QAAAA,OAAO,EAAE;AAJb;;AAMJ,SAAK,QAAL;AACI,+BACOM,SADP;AAEIF,QAAAA,QAAQ,EAAE,KAFd;AAGIH,QAAAA,WAAW,EAAE;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAHjB;AAIIF,QAAAA,OAAO,EAAE;AAJb;;AAMJ,SAAK,aAAL;AACI,+BACOM,SADP;AAEIJ,QAAAA,QAAQ,EAAEK,MAAM,CAACS,IAFrB;AAGIb,QAAAA,KAAK,EAAE,EAHX;AAIIH,QAAAA,OAAO,EAAE;AAJb;;AAMJ;AACI,aAAOM,SAAP;AAzDR;AA2DH,CA5DD;;AA8DA,IAAMW,KAAK,GAAG1B,WAAW,CAACc,OAAD,EAAUb,eAAe,CAACE,KAAD,CAAzB,CAAzB;AAEAuB,KAAK,CAACC,SAAN,CAAgB;AAAA,SAAMR,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACE,QAAN,EAAZ,CAAN;AAAA,CAAhB,E,CAEA;;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAa;AAChC,MAAIC,GAAG,GAAG,kEAAV;;AADgC,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAEhC,MAAIA,IAAJ,EAAU;AACNA,IAAAA,IAAI,CAACT,GAAL,CAAS,UAAAU,GAAG,EAAI;AACZ,aAAOF,GAAG,IAAI,MAAME,GAAG,CAACzB,IAAV,GAAiB,GAAjB,GAAuByB,GAAG,CAACC,KAAzC;AACH,KAFD;AAGH;;AACD,SAAO,UAAAC,QAAQ,EAAI;AACff,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBc,QAArB,EADe,CAEf;;AACAR,IAAAA,KAAK,CAACQ,QAAN,CAAe;AAACjB,MAAAA,IAAI,EAAE;AAAP,KAAf;AACAf,IAAAA,KAAK,CAACiC,GAAN,CAAUL,GAAV,EACKM,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAInB,IAAI,GAAG,EAAX;;AACA,UAAImB,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoBkB,MAApB,GAA6B,CAAjC,EAAmC;AAC/BrB,QAAAA,IAAI,GAAG;AACHsB,UAAAA,EAAE,EAAEH,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBmB,EADxB;AAEHjC,UAAAA,IAAI,EAAE8B,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBd,IAF1B;AAGHC,UAAAA,MAAM,EAAE6B,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBb,MAAvB,IAAiC,EAHtC;AAIHiC,UAAAA,QAAQ,EAAEJ,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBoB,QAJ9B;AAKHC,UAAAA,KAAK,EAAEL,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBqB,KAL3B;AAMHC,UAAAA,WAAW,EAAEN,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBuB,IANjC;AAOHC,UAAAA,KAAK,EAAER,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuBwB,KAP3B;AAQHC,UAAAA,SAAS,EAAET,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuByB,SAR/B;AASHC,UAAAA,KAAK,EAAEV,QAAQ,CAACC,IAAT,CAAcjB,KAAd,CAAoB,CAApB,EAAuB2B;AAT3B,SAAP;AAWH;;AACDtB,MAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,QAAAA,IAAI,EAAE,UADK;AAEXC,QAAAA,IAAI,EAAEA;AAFK,OAAf;AAIH,KApBL;AAqBH,GAzBD;AA0BH,CAjCM;AAkCP,OAAO,IAAM+B,SAAS,GAAG,SAAZA,SAAY,CAAC/B,IAAD,EAAOgC,MAAP,EAAkB;AACvC/B,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,IAAtB,EAA4B,YAA5B,EAA0CgC,MAA1C;AACA,SAAO,UAAAhB,QAAQ,EAAI;AACfR,IAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,MAAAA,IAAI,EAAE,aADK;AAEXC,MAAAA,IAAI,EAAEA,IAFK;AAGXM,MAAAA,OAAO,EAAE0B;AAHE,KAAf;AAKH,GAND;AAOH,CATM;AAWP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACxC,QAAD,EAAc;AACpC,SAAO,UAAAuB,QAAQ,EAAI;AACfhC,IAAAA,KAAK,CAACkD,IAAN,CAAW,gBAAX,EAA6B;AAACzC,MAAAA,QAAQ,EAAEA;AAAX,KAA7B,EACKyB,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAJ,EAAc;AACVX,QAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,UAAAA,IAAI,EAAE,OADK;AAEXQ,UAAAA,IAAI,EAAEY,QAAQ,CAACC;AAFJ,SAAf;AAIH;AACJ,KARL;AASH,GAVD;AAWH,CAZM;AAcP,OAAO,IAAMe,KAAK,GAAG,SAARA,KAAQ,CAAC5B,IAAD,EAAU;AAC3B,SAAO,UAAAS,QAAQ,EAAI;AACfhC,IAAAA,KAAK,CAACkD,IAAN,CAAW,qBAAX,EAAkC;AAAC3B,MAAAA,IAAI,EAAE;AAAEd,QAAAA,QAAQ,EAAEc;AAAZ;AAAP,KAAlC,EACKW,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAJ,EAAc;AACVX,QAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,UAAAA,IAAI,EAAE,OADK;AAEXQ,UAAAA,IAAI,EAAEY,QAAQ,CAACC;AAFJ,SAAf;AAIH,OALD,MAKO;AACH,eAAOb,IAAP;AACH;;AACDN,MAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAQ,CAACC,IAArB;AACP,KAXD;AAYH,GAbD;AAcH,CAfM;AAiBP,OAAO,IAAMgB,MAAM,GAAG,SAATA,MAAS,GAAM;AACxB,SAAO,UAAApB,QAAQ,EAAI;AACfR,IAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,MAAAA,IAAI,EAAE;AADK,KAAf;AAGH,GAJD;AAKH,CANM;AAQP,OAAO,IAAMsC,UAAU,GAAG,SAAbA,UAAa,CAAChD,IAAD,EAAOoC,WAAP,EAAuB;AAC7C,SAAO,UAAAT,QAAQ,EAAI;AACfhC,IAAAA,KAAK,CAACkD,IAAN,CAAW,eAAX,EAA4B;AAAE/C,MAAAA,IAAI,EAAE;AAAEE,QAAAA,IAAI,EAAEA,IAAR;AAAcoC,QAAAA,WAAW,EAAEA,WAA3B;AAAwCa,QAAAA,OAAO,EAAE9B,KAAK,CAACE,QAAN,GAAiBlB,WAAjB,CAA6B8B;AAA9E;AAAR,KAA5B,EACKJ,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAJ,EAAc;AACVX,QAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,UAAAA,IAAI,EAAE,aADK;AAEXZ,UAAAA,IAAI,EAAEgC,QAAQ,CAACC;AAFJ,SAAf;AAIH,OALD,MAKO;AACHnB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,QAAQ,CAACC,IAArB;AACH;AACJ,KAVL;AAWH,GAZD;AAaH,CAdM;AAgBP,OAAO,IAAMmB,YAAY,GAAG,SAAfA,YAAe,CAACpD,IAAD,EAAOgB,KAAP,EAAiB;AACzC,SAAO,UAAAa,QAAQ,EAAI;AACfhC,IAAAA,KAAK,CAACwD,GAAN,CAAU,mBAAkBrD,IAAI,CAACmC,EAAjC,EAAqC;AAAEnC,MAAAA,IAAI,EAAE;AAAEgB,QAAAA,KAAK,qBAAMhB,IAAI,CAACgB,KAAX,4BAAqBA,KAArB;AAAP;AAAR,KAArC,EACKe,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,UAAIA,QAAJ,EAAc;AACVX,QAAAA,KAAK,CAACQ,QAAN,CAAe;AACXjB,UAAAA,IAAI,EAAE,WADK;AAEXL,UAAAA,KAAK,EAAEyB,QAAQ,CAACC;AAFL,SAAf;AAIH;AACJ,KARL;AASH,GAVD;AAWH,CAZM;AAeP,eAAeZ,KAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\"\nimport axios from \"axios\"\nimport thunk from \"redux-thunk\"\n\n// const baseUrl = process.env.BASE_URL\n\nconst initialState = {\n    deck: \"\",\n    foundCard: {\n        name: \"\",\n        colors: [],\n\n    },\n    loading: false,\n    currentUser: {\n        username: '', \n        decks: []\n    },\n    loggedIn: false\n}\n\nconst reducer = (prevState = initialState, action) => {\n    switch (action.type) {\n        case \"START_LOADING\":\n            return {\n                ...prevState,\n                loading: true\n            }\n        case \"GET_CARD\":\n            return {\n                ...prevState,\n                foundCard: action.card,\n                loading: false\n            }\n        case \"CREATE_DECK\":\n            return {\n                ...prevState,\n                deck: action.deck\n            }\n        case \"ADD_TO_DECK\":\n            console.log(\"PrevState: \", prevState.currentUser.decks[0].cards)\n            return {\n                ...prevState,\n                currentUser: { \n                    ...prevState.currentUser, \n                    decks: prevState.currentUser.decks.map(\n                        (deck) => deck._id === action.deck_id ? {...deck, cards: [...deck.cards, action.card]}\n                        : deck\n                    )\n                },\n                loading: false\n            }\n        case \"SAVE_DECK\":\n            return {\n                ...prevState,\n                decks: action.decks\n            }\n        case \"LOGIN\":\n            return {\n                ...prevState,\n                loggedIn: true,\n                currentUser: {...prevState.user, ...action.user},\n                loading: false \n            }\n        case \"LOGOUT\":\n            return {\n                ...prevState,\n                loggedIn: false,\n                currentUser: {username: ''},\n                loading: false \n            }\n        case \"CREATE_USER\":\n            return {\n                ...prevState,\n                username: action.user,\n                decks: [],\n                loading: false\n            }\n        default:\n            return prevState;\n    }\n}\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nstore.subscribe(() => console.log(store.getState()));\n\n//ACTION CREATORS\n\nexport const getCard = (...args) => {\n    let url = \"https://api.magicthegathering.io/v1/cards?random=true&pageSize=1\"\n    if (args) {\n        args.map(arg => {\n            return url += \"&\" + arg.name + \"=\" + arg.value\n        })\n    }\n    return dispatch => {\n        console.log(\"dis: \", dispatch)\n        //DO THE PROMISE STUFF\n        store.dispatch({type: \"START_LOADING\"});\n        axios.get(url)\n            .then(response => {\n                let card = {}\n                if (response.data.cards.length > 0){\n                    card = {\n                        id: response.data.cards[0].id,\n                        name: response.data.cards[0].name,\n                        colors: response.data.cards[0].colors || [],\n                        manaCost: response.data.cards[0].manaCost,\n                        types: response.data.cards[0].types,\n                        description: response.data.cards[0].text,\n                        power: response.data.cards[0].power,\n                        toughness: response.data.cards[0].toughness,\n                        image: response.data.cards[0].imageUrl\n                    }\n                }\n                store.dispatch({\n                    type: \"GET_CARD\",\n                    card: card\n                })\n            })\n    }\n}\nexport const addToDeck = (card, deckId) => {\n    console.log(\"Card: \", card, \" DECK ID: \", deckId)\n    return dispatch => {\n        store.dispatch({\n            type: \"ADD_TO_DECK\",\n            card: card,\n            deck_id: deckId\n        })\n    }\n}\n\nexport const createUser = (username) => {\n    return dispatch => {\n        axios.post('/api/v1/users/', {username: username})\n            .then(response => {\n                if (response) {\n                    store.dispatch({\n                        type: \"LOGIN\",\n                        user: response.data\n                    })\n                }\n            })\n    }\n}\n\nexport const login = (user) => {\n    return dispatch => {\n        axios.post('/api/v1/users/login', {user: { username: user }})\n            .then(response => {\n                if (response) {\n                    store.dispatch({\n                        type: \"LOGIN\",\n                        user: response.data\n                    })\n                } else {\n                    return user\n                }\n                console.log(response.data)\n        })\n    }\n}\n\nexport const logout = () => {\n    return dispatch => {\n        store.dispatch({\n            type: \"LOGOUT\"\n        })\n    }\n}\n\nexport const createDeck = (name, description) => {\n    return dispatch => {\n        axios.post('/api/v1/decks', { deck: { name: name, description: description, user_id: store.getState().currentUser.id }})\n            .then(response => {\n                if (response) {\n                    store.dispatch({\n                        type: \"CREATE_DECK\",\n                        deck: response.data\n                    })\n                } else {\n                    console.log(response.data)\n                }\n            })\n    }\n}\n\nexport const saveDeckToDB = (deck, cards) => {\n    return dispatch => {\n        axios.put('/api/v1/decks/'+ deck.id, { deck: { cards: [...deck.cards, ...cards] }})\n            .then(response => {\n                if (response) {\n                    store.dispatch({\n                        type: \"SAVE_DECK\",\n                        decks: response.data\n                    })\n                }\n            })\n    }\n}\n\n\nexport default store;\n"]},"metadata":{},"sourceType":"module"}